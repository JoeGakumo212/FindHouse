import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { parseCookies } from 'nookies';

const Utility = () => {

  const [property_name, setPropertyName] = useState('');
  const [propertyOptions, setPropertyOptions] = useState([]);
  const [showOptions, setShowOptions] = useState(false);
  const [utility_display_name, setUtilityDisplayName] = useState('');
  const [unitReadings, setunitReadings] = useState([
    { unit_id: '', reading_date: '', current_reading: '' },
  ]);
 
  
  const [unitOptions, setUnitOptions] = useState([]);
  const [importOption, setImportOption] = useState('manual');
  const [file, setFile] = useState(null);
  const [showUnitOptions, setShowUnitOptions] = useState(false);
  const [selectedUnit, setSelectedUnit] = useState('');

  const handlePropertyInputChange = (e) => {
    const input = e.target.value;
    setPropertyName(input);
    searchProperties(input);
  };

  const handlePropertyOptionClick = (option) => {
    const selectedProperty = propertyOptions.find(
      (property) => property.property_name === option
    );
    if (selectedProperty) {
      setPropertyName(selectedProperty.property_name);
      setSelectedUnit('');
      const updatedFields = [...unitReadings];
      updatedFields[0].unit_id = ''; // Clear the unit ID when selecting a new property
      setunitReadings(updatedFields);
      setPropertyId(selectedProperty.property_id); // New state variable for property ID
    }
    setShowOptions(false);
  };

  const handleUnitOptionClick = (option) => {
    setSelectedUnit(option);
    setShowUnitOptions(false);
    const updatedFields = [...unitReadings];
    updatedFields[0] = {
      ...updatedFields[0],
      unit_id: option,
      reading_date: '', // Reset the reading_date for the selected unit
      current_reading: '', // Reset the current_reading for the selected unit
    };
    setunitReadings(updatedFields);
  };

  const searchProperties = async (query) => {
    try {
      const cookies = parseCookies();
      const tokenFromCookie = cookies.access_token;

      const headers = {
        Authorization: `Bearer ${tokenFromCookie}`,
        'Content-Type': 'application/json',
      };

      const params = {
        property: query,
        page: 0,
        limit: 0,
        sortField: 'updated_at',
        sortDirection: 'desc',
        whereField: '',
        whereValue: '',
      };

      const response = await axios.get(
        'https://cloudagent.co.ke/backend/api/v1/properties',
        {
          params,
          headers,
        }
      );

      if (response.status === 200) {
        const apiData = response.data.data;
        const propertyOptions = apiData.map(
          (property) => property.property_name
        );
        setPropertyOptions(propertyOptions);
        console.log('Property Details Name', apiData);
      } else {
        console.error('Response data is not an array:', apiData.data);
      }
    } catch (error) {
      console.error('Error occurred while searching:', error);
    }
  };

  // Fetch units based on unit_name
  const searchUnits = async (query) => {
    try {
      const cookies = parseCookies();
      const tokenFromCookie = cookies.access_token;

      const headers = {
        Authorization: `Bearer ${tokenFromCookie}`,
        'Content-Type': 'application/json',
      };

      const params = {
        unit: query,
        page: 0,
        limit: 0,
        sortField: 'updated_at',
        sortDirection: 'desc',
        whereField: '',
        whereValue: '',
      };

      const response = await axios.get(
        'https://cloudagent.co.ke/backend/api/v1/units',
        {
          params,
          headers,
        }
      );

      if (response.status === 200) {
        const apiData = response.data.data;
        const unitOptions = apiData.map((property) => property.unit_name);
        setUnitOptions(unitOptions);
        console.log('Units Data', apiData);
        console.log('Unit Options', unitOptions);
      } else {
        console.error('Response data is not an array:', apiData.data);
      }
    } catch (error) {
      console.error('Error occurred while searching:', error);
    }
  };

  useEffect(() => {
    if (property_name) {
      searchUnits(property_name);
    }
  }, [property_name]);

  const handleAddUnit = () => {
    const newUnit = { unit_id: '', reading_date: '', current_reading: '' };
    setunitReadings([...unitReadings, newUnit]);
  };

  const handleRemoveUnit = (index) => {
    const updatedFields = [...unitReadings];
    updatedFields.splice(index, 1);
    setunitReadings(updatedFields);
  };

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    setFile(selectedFile);
  };

  const handleSaveUtility = async () => {
    try {
      // Prepare the data to be submitted
      const data = {
        property_id: property_id, // Use the property ID state variable
        utility_id: utility_display_name,
        unitReadings: unitReadings.map((unit) => ({
          unit_id: unit.unit_id,
          reading_date: unit.reading_date,
          current_reading: unit.current_reading,
        })),
      };
  
      // Log the data before submitting
      console.log('Utility data to be submitted:', data);
  
      const cookies = parseCookies();
      const tokenFromCookie = cookies.access_token;
  
      const headers = {
        Authorization: `Bearer ${tokenFromCookie}`,
        'Content-Type': 'application/json',
      };
  
      // Send a POST request to the API endpoint with cookies and headers
      const response = await axios.post(
        'https://cloudagent.co.ke/backend/api/v1/readings',
        data,
        {
          headers: headers,
        }
      );
  
      if (response.status === 200) {
        console.log('Utility data saved successfully');
        alert("Utility data saved successfully")
        // Reset the form or perform any additional actions upon successful submission
      } else {
        console.error('Failed to save utility data:', response.data);
      }
    } catch (error) {
      console.error('Error occurred while saving utility data:', error);
    }
  };

  return (
    <>
      <div className="row">
        <div className="col-lg-6">
          <div className="my_profile_setting_input ui_kit_select_search form-group">
            <label htmlFor="PropertyName">Property Name</label>
            <input
              type="text"
              value={property_name}
              onChange={handlePropertyInputChange}
              onClick={() => setShowOptions(true)}
              placeholder="Find property by Name *"
              className="selectpicker form-select"
            />
            {showOptions && propertyOptions.length > 0 && (
              <ul className="autocomplete-options">
                {propertyOptions.map((option, index) => (
                  <li
                    key={index}
                    onClick={() => handlePropertyOptionClick(option)}
                  >
                    {option}
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>
        <div className="col-lg-6">
          <div className="my_profile_setting_input ui_kit_select_search form-group">
            <label htmlFor="utility_display_name">Utility Name</label>
            <select
              value={utility_display_name}
              onChange={(e) => setUtilityDisplayName(e.target.value)}
              placeholder="Enter utility name"
              className="selectpicker form-select"
            >
              <option value="" disabled>
                Utility Name
              </option>
              <option value="Electricity">Electricity</option>
              <option value="Water">Water</option>
              <option value="Garbage">Garbage</option>
            </select>
          </div>
        </div>
      </div>
      {(property_name || utility_display_name) && (
        <div className="row">
          <div className="col-lg-6">
            <div className="my_profile_setting_input form-group">
              <div className="form-check">
                <input
                  type="radio"
                  id="manualImport"
                  name="importOption"
                  value="manual"
                  checked={importOption === 'manual'}
                  onChange={() => setImportOption('manual')}
                  className="form-check-input"
                />
                <label htmlFor="manualImport" className="form-check-label">
                  Manual Entry
                </label>
              </div>
            </div>
          </div>
          <div className="col-lg-6">
            <div className="my_profile_setting_input form-group">
              <div className="form-check">
                <input
                  type="radio"
                  id="autoImport"
                  name="importOption"
                  value="auto"
                  checked={importOption === 'auto'}
                  onChange={() => setImportOption('auto')}
                  className="form-check-input"
                />
                <label htmlFor="autoImport" className="form-check-label">
                  Auto Import
                </label>
              </div>
            </div>
          </div>
        </div>
      )}
      {importOption === 'manual' && (property_name || utility_display_name) && (
        <>
          {unitReadings.map((unit, index) => (
            <div className="row" key={index}>
              <div className="col-lg-4">
                <div className="my_profile_setting_input form-group">
                  <label htmlFor="unit_id">Unit </label>
                  <input
                    type="text"
                    value={unit.unit_id}
                    onChange={(e) => {
                      const updatedFields = [...unitReadings];
                      updatedFields[index].unit_id = e.target.value;
                      setunitReadings(updatedFields);
                      searchUnits(e.target.value);
                    }}
                    placeholder="Enter unit Name"
                    className="form-control"
                  />
                  {unitOptions.length > 0 && (
                    <ul className="autocomplete-options">
                      {unitOptions.map((option, index) => (
                        <li
                          key={index}
                          onClick={() => {
                            const updatedFields = [...unitReadings];
                            updatedFields[index].unit_id = option;
                            setunitReadings(updatedFields);
                            setUnitOptions([]);
                          }}
                        >
                          {option}
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
              </div>
              <div className="col-lg-4">
                <div className="my_profile_setting_input form-group">
                  <label htmlFor="reading_date">Reading Date</label>
                  <input
                    type="date"
                    value={unit.reading_date}
                    onChange={(e) => {
                      const updatedFields = [...unitReadings];
                      updatedFields[index].reading_date = e.target.value;
                      setunitReadings(updatedFields);
                    }}
                    placeholder="Enter reading date"
                    className="form-control"
                  />
                </div>
              </div>
              <div className="col-lg-4">
                <div className="my_profile_setting_input form-group">
                  <label htmlFor="current_reading">Current Reading</label>
                  <input
                    type="text"
                    value={unit.current_reading}
                    onChange={(e) => {
                      const updatedFields = [...unitReadings];
                      updatedFields[index].current_reading = e.target.value;
                      setunitReadings(updatedFields);
                    }}
                    placeholder="Enter current reading"
                    className="form-control"
                  />
                </div>
              </div>
              {index === unitReadings.length - 1 && (
                <div className="col-lg-12">
                  <div className="my_profile_setting_input">
                    <button
                      className="btn btn-success float-start"
                      onClick={handleAddUnit}
                    >
                      Add Another Unit
                    </button>
                  </div>
                  <div className="my_profile_setting_input">
                    <button
                      className="btn btn-primary float-end btn2 btn-success"
                      onClick={handleSaveUtility}
                    >
                      Save
                    </button>
                  </div>
                </div>
              )}
              {index !== unitReadings.length - 1 && (
                <div className="col-lg-12">
                  <div className="my_profile_setting_input">
                    <button
                      className="btn btn-danger float-start"
                      onClick={() => handleRemoveUnit(index)}
                    >
                      Remove
                    </button>
                  </div>
                </div>
              )}
            </div>
          ))}
        </>
      )}
    </>
  );
};

export default Utility;
